SQL NOTES
_________

____________________

ВЫБОРКА ДАННЫХ
_____________________

SELECT name FROM teachers           //Выбрать записи поля name в таблице teachers
_______________________________________

SELECT name, addr, city             //Выбрать записи полей  name, addr, city
    FROM teachers                   //в таблице teachers
    ORDER BY name                   //сортировать по полю name
_______________________________________

SELECT title                        //Выбрать записи поля title
    FROM courses                    //в таблице courses
    WHERE length > 30               //только те записи у которыхв поле length значение более 30
_______________________________________

SELECT *                            //Выбрать все поля
FROM courses                        //в таблице courses
WHERE length > 30                   //только те записи у которых в поле length значение более 30
AND title LIKE 'Web%'               //И в поле title значение похоже на 'Web...'
_______________________________________

SELECT DISTINCT length              //Выбрать уникальных значений поля length
    FROM courses                    //в таблице courses
_______________________________________

__________________

Объединение таблиц
__________________

SELECT t.name, t.code, l.course             //Выбрать поля name code course
    FROM teachers t                         //в таблице teachers с псевдонимом t
    INNER JOIN lessons l ON t.id = l.tid    //объединение с таблицой lessons (псевдоним l) по критерию id = tid
_______________________________________

SELECT t.name, t.code, l.course             //Выбрать поля name code course
FROM teachers t                             //в таблице teachers с псевдонимом t
LEFT OUTER JOIN lessons l ON t.id = l.tid   //объединение всех значений с таблицой lessons (псевдоним l)
                                              по критерию id = tid
_______________________________________

____________________

Вставка новой записи
____________________

INSERT INTO courses VALUES (NULL, 'PHP', '...', 40)     //Добавление в таблицу, в скобках перечисляются
                                                          через запятую данные
_______________________________________

INSERT INTO courses(title, length) VALUES ('PHP', 40)   //Добавление данных в указанные поля
_______________________________________

_______________

Удаление записи
_______________


DELETE FROM lessons WHERE date = '2014-06-11'           //Удаление из таблицы lessons где поле date равно 2014-06-11
_______________________________________

________________

Изменение записи
________________


UPDATE teachers
SET
    zarplata = zarplata * 2,
    premia = premia * 10
WHERE name LIKE 'Иванов%'
    OR name LIKE 'Петров%'
    OR name LIKE 'Сидоров%'     где поле name похоже на 'Иванов%' или 'Петров%' и тд.
_______________________________________

UPDATE teachers
SET
zarplata = zarplata * 2,
premia = premia * 10
WHERE name IN
('Иванов', 'Петров', 'Сидоров')     где поле name содержит (перечень)
_______________________________________

____________________

Создание базы данных
____________________

CREATE DATABASE news
_______________________________________

_____________________________________________

Создание таблицы и полей (СУБД MySQL диалект)
_____________________________________________

CREATE TABLE items (
    id int NOT NULL auto_increment,
    title varchar(255) NOT NULL default '',
    description varchar(255) NOT NULL default '',
    content text,
    author varchar(50) NOT NULL default '',
    pubdate timestamp NOT NULL default '',
    PRIMARY KEY (id)
    )
_____________________________________________

Экспорт базы данных

mysqldump -uлогин  -pпароль имя_БД > dump.sql
_____________________________________________

Импорт базы данных

mysql -uлогин  -pпароль имя_БД < dump.sql
_____________________________________________

USE web;        //выбор базы данных
_____________________________________________

SHOW TABLES;    //Структура таблиц базы данны
_____________________________________________

DESCRIBE courses;       //Просмотр структуры таблицы
_____________________________________________

SELECT COUNT(*) FROM courses;       //Проверка числа записей в таблице
_____________________________________________


PDO PHP Data Object
___________________

MySQL
 $db = new PDO('mysql:host=host;dbname=db', $user, $pass);

PostgreSQL
 $db = new PDO('pgsql:host=host;dbname=db', $user, $pass);

SQLite
 $db = new PDO('sqlite:db');

 Постоянное соединение
 $db = new PDO('mysql:host=host;dbname=test', $user, $pass, array(PDO::ATTR_PERSISTENT => true));
_____________________________________________

Использование ini-файла
_______________________

Файл config.ini
 db.conn = "mysql:host=localhost;dbname=test"
 db.user = "vasya"
 db.pass = "parol"

Загрузка конфигурационного файла
 $params = parse_ini_file('config.ini');

Соединение с СУБД
 $db = new PDO($params['db.conn'], $params['db.user'], $params['db.pass']);
_____________________________________________

Выполнение запроса
__________________

$sql = "INSERT INTO users(name, email) VALUES('john', 'john@smith.com')";

$db = new PDO($params['db.conn'], $params['db.user'], $params['db.pass']);
$result = $db->exec($sql);

Ошибки проверять как:
 if($result === false)
die('ERROR');
_____________________________________________

Фильтрация значений (mysql_real_escape_string)
___________________

$name = $_POST["user"];

MySQL, PostgreSQL, SQLite…
 $db = new PDO($params['db.conn'], $params['db.user'], $params['db.pass']);

$name = $db->quote($name);

$sql = "INSERT INTO users(name) VALUES($name)";
_____________________________________________

Выборка данных
______________

$sql = "SELECT id, name FROM users";

MySQL, PostgreSQL, SQLite…
 $db = new PDO($params['db.conn'], $params['db.user'], $params['db.pass']);

$result = $db->query($sql);

Если возвращается false
 $db->query($sql) or die('ERROR');
_____________________________________________

Обработка данных
________________

MySQL, PostgreSQL, SQLite…
 $db = new PDO($params['db.conn'], $params['db.user'], $params['db.pass']);

$stmt = $db->query($sql);
$row = $stmt->fetch(PDO::FETCH_NUM);
$row = $stmt->fetch(PDO::FETCH_ASSOC);
$row = $stmt->fetch(PDO::FETCH_BOTH);
_____________________________________________

Обработка ошибок
________________

$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);

$db->setAttribute(PDO::ATTR_ERRMODE,  PDO::ERRMODE_SILENT);

catch(PDOException $e){
$e -> getCode() . ":". $e -> getMessage();
}

echo $db -> errorCode();
print_r($db -> errorInfo());
_____________________________________________

Получение объекта
_________________

$obj = $stmt->fetch(PDO::FETCH_OBJ);

echo $obj -> id . "\n";
echo $obj -> name . "\n";
echo $obj -> email . "\n";
_____________________________________________

$obj = $stmt->fetch(PDO::FETCH_LAZY);       //объединяет ассоциативный массив, упорядоченный и объект.
_____________________________________________
