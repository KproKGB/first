_____________________________________________

history - объект в котором хранится история посещения сайтов.

свойство:
history.length - возвращает длину истории.

методы:
history.back() - Вернуться на предыдущую страницу в истории
history.forward() - перейти на следующую страницу в истории
history.go(5) - перейти на 5 страничек вперед
___________________________________________

Screen - отвечает за монитор пользователя.

Screen.width - ширина монитора
Screen.height - высота монитор
.availWidth - ширина монитора без панели задач
.availHeight - высота монитор без панели задач.
.colorDepth -
___________________________________________

Location - возвращает любую часть адресной строки

Свойства:
location.protocol - вернет часть протокола в виде строки "http:"
location.host - возвращает hostname и port вместе
location.hostname - возвращает имя хоста или домена
location.port - возвращает номер порта если он указан
location.pathname - возвращает полный адрес без учета GET параметров
location.search - Возвращает поисковый запрос.
location.hash - Возвращает хеш
location.href - возвращает все что есть в адресной строке.

Методы:
location.reload() - перезагрузить страницу
location.reload(true) - принудительно перезапросит страницу с сервера, а не из кеша

location.assign("http://ya.ru") - получив адрес в качестве параметра загружает страницу и добавляет в историю страницу
location.replace("http://ya.ru") - получив адрес в качестве параметра загружает страницу, заменяет предыдущую страницу
на текущую в истории history
___________________________________________

Document - основной объект

Свойства
 lastModified
 title
 domain

Методы
 open()
 write(string, [string[, …]]) - запись в html дерево
 close()
___________________________________________

Window
======

Диалоговые окна:

alert(сообщение)            //alert выводит на экран окно с сообщением и приостанавливает
                            выполнение скрипта, пока пользователь не нажмёт «ОК».
                            Окно сообщения, которое выводится, является модальным окном.
                            Слово «модальное» означает, что посетитель не может взаимодействовать
                            со страницей, нажимать другие кнопки и т.п., пока не разберётся с окном.
                            В данном случае – пока не нажмёт на «OK».

alert( "Привет" );
_____________________________________________

prompt();

Функция prompt принимает два аргумента:

result = prompt(title, default);        //Она выводит модальное окно с заголовком title,
                                        полем для ввода текста, заполненным строкой по умолчанию
                                        default и кнопками OK/CANCEL.

Вызов prompt возвращает то, что ввёл посетитель — строку или специальное значение null, если ввод отменён.

var years = prompt('Сколько вам лет?', 100);
_____________________________________________

confirm

result = confirm(question);             //confirm выводит окно с вопросом question с двумя кнопками: OK и CANCEL.
                                        Результатом будет true при нажатии OK и false – при CANCEL(Esc).

var isAdmin = confirm("Вы - администратор?");
_____________________________________________

#########
# Таймеры
#########

x = setTimeout(code, 1000)  -  Исполняет code с задержкой в 1000 после исполнения всего кода. Выполняется 1 раз
clearTimeout(x) - отмена исполнения тамоцта


x = setInterval(code, 1000) - Тоже что и выше, но исполняется не один раз, а через заданный интервал
clearInterval(x)
_____________________________________________

######################
# Создание нового окна
######################

Методы
window.open('url', 'name', 'params', history) - создание нового окна. Первый параметр урл или путь к файлу.
Второй параметр "Имя", что бы можно потом к нему обращаться. Третий параметр - через запятую указываются
параметры открываемого окна (параметры передаются как строка)
window.close() - закруть созданное окно. Или можно обратиться по созданному имени. name.close()
window.focus() - перевод окна в активный режим
window.blur() - переовд в пассивный режим

Свойство
window.closed - было ли закрыто окно. возвразает true либо false
window.opener - ссылка на то окно, которое открыло новое.
_____________________________________________

Параметры  окрываемого окна
___________________________

width (число)  -  ширина
height (число)  -  высота
left (число)  -  смещение создаваемого окна относительно верхнего угла экрана
top (число)  -  смещение создаваемого окна относительно верхнего угла экрана
location (1|0 или yes|no)  -  Разрешает или запрещает показывать адресную строку (игнорируется браузерами).
menubar (1|0 или yes|no)  -  показывать в IE панель меню
scrollbars (1|0 или yes|no)  - показывать или отключить полосу прокрутки.
toolbar (1|0 или yes|no)  -  вклюсить тулбар (в IE)
status (1|0 или yes|no)  -  Показывать в IE строку состояния
resizable (1|0 или yes|no) -  Позволяет изменять или запретить изменение размера окна.
_____________________________________________

Методы манипуляции окнами
___________________________

window.moveTo(x, y) - перемещает окно в точку с координатами x, y.
window.moveBy(x, y) - передвигать окно на x, y  относительно текущей позиции
window.resizeTo(x, y) - изменить размер окна до x, y.
window.resizeBy(x, y)  - изменить размер окна до x, y относительно текущего размера
window.scrollTo(x, y)  - скролл
window.scrollBy(x, y)  -  скролл
_____________________________________________

############
# Фрейм
############

<iframe name="top" src="top.html"></iframe>
<iframe name="bottom" src="bottom.html"></iframe>

frames[0] //как к элементу массива
frames['top'] //как к свойству объекта
frames.top //как к свойству объекта
_____________________________________________

Отношение между окнами
______________________

window - это iframe
self
parent - обращение к родителю iframe
top - обращение к самому главному окну. В случа если множество вложенных iframe
name
_____________________________________________

HTML - кллекции
_______________

forms
images
links
applets
embeds

<form name="search">
 document.forms[0]
 document.forms['search']
 document.forms.search

document.links[0].style.color = "red"
_____________________________________________

element.style.padding = '10px';

Правила именования
border-top-width => borderTopWidth

Разрешение конфликта имен атрибутов
for => htmlFor
float => cssFloat

Исключение
class => className
_____________________________________________

Элементы HTML
################

HTMLFormElement
 Свойства
 elements
 length
 name
 action
 enctype
 method
 target

  Методы
 submit()
 reset()
_______________

HTMLInputElement
 Свойства
 form (JS)
 defaultValue (JS)
 defaultChecked
 checked
 maxLength
 type
 value
 size
 name

 Методы
 select()
 click()
 focus()
 blur()
_______________

HTMLTextAreaElement
 Свойства
 defaultValue (JS)
 form (JS)
 value (JS)
 type (JS)
 cols
 rows
 readOnly
 tabIndex
 disabled
 Методы
 select()
 focus()
 blur()
_______________

HTMLSelectElement
 Свойства
 options (JS)
 length (JS)
 type (JS)
 selectedIndex (JS)  //в случае если не выбран ни один элемент возвращает -1;
 value (JS)
 form (JS)
 disabled и multiple
 name
 size и tabIndex
 Методы
 add()
 remove()
 focus()
 blur()
_______________

HTMLOptionElement
 Свойства
 form (JS)
 text (JS)
 defaultSelected (JS)
 index (JS)
 value
 selected
 disabled
 label
_______________

HTMLImageElement
 var img = new Image(300, 200);

 Свойства
 src
 alt
 width
 height
 border
_______________

HTMLTableElement
 Свойства
 tHead
 tFoot
 tBodies[]
 rows[]
 caption
 width
 border
 cellPadding
 cellSpacing

 Методы
 createCaption()
 deleteCaption()
 createTHead()
 deleteTHead()
 createTFoot()
 deleteTFoot()
 insertRow(index)
 deleteRow(index)
_______________

HTMLTableSectionElement

 Свойства
 rows
 align
 vAlign

 Методы
 insertRow(index)
 deleteRow(index)
_______________

HTMLTableRowElement

 Свойства
 cells
 rowIndex
 sectionRowIndex
 vAlign
 bgColor
 Методы
 insertCell(index)
 deleteCell(index)
_______________

HTMLTableCellElement

 Свойства
 cellIndex
 colSpan
 rowSpan
 align
 vAlign
 width
 height
 textContent
 innerHTML             //Свойство, вставляет в виде строки HTML элемент.
_____________________________________________

###############
## DOM
###############

Node - узел документа
_____________________

 Свойства
 parentNode - обращение к родительскому элементу
 childNodes - коллекция детей элемента
 firstChild - первый ребенок элемента
 lastChild - последний ребенок элемента
 nextSibling - след соседний элемент
 previousSibling - предыдущий соседний элемент
 ownerDocument - сам document
 nodeName - возвращает имя тега для элемента, для остальных - значение узла
 nodeType - возвразает цифру соответствубщая типу узла
 nodeValue - возвращает текст у текстового узла, для остальных возвращает null

 Методы
 hasChildNodes() - возвращает true либо false при наличии детей элемента
 cloneNode(bool) -
 appendChild(e) - добавить элемент
 insertBefore(e, p) - вставить элемент "е" перед элементом "р"
 replaceChild(e, p) - заменить вместо "е" на "р"
 removeChild(e) - удалить элемент.
_____________________________________________

Element - элемент документа
___________________________

 Свойства
 Свойства Node
+
 tagName


 Методы
 Методы Node
+
 getElementsByTagName(t) - позволяет выбрать все ниже лежащие узлы с выбранным тегом
 hasAttribute(a) - имеет атрибут??
 getAttribute(a) - возвращает значение атрибута
 setAttribute(a, v) - установить значение v атрибута a
 removeAttribute(a) - удалить атрибут
_____________________________________________

Интерфейс Document
__________________

Свойства Node
+
documentElement - выбрать корневой элемент html
body - выбираем body
styleSheets -
doctype -

Методы Node
+
getElementsByTagName(e) - выбрать элементы по тегу
getElementById(id) - выбор элемента по идентификатору id
_____________________________________________

Создание узлов
______________

 Методы интерфейса Document
 createElement(element_name)
 createTextNode(string)
 createDocumentFragment()
 createComment(string)

var p = document.createElement("p");        //Создаем элемент
var t = document.createTextNode("Hello");   //Создаем тескт
p.appendChild(t);                           //добавляем тескт в элемент, как ребенка
doc.appendChild(p);                         //добавляем наш элемент с текстом в документ (body или еще куда-то).

doc.insertBefore(p, p2);                    //Добавить наш элемент перед p2
_____________________________________________

#####################
## События
#####################

 Срабатывают на большинстве элементов
 onclick (можно отменить)
 onmousedown
 onmouseup
 onmousemove
 onmouseover
 onmouseout
______________________________

<body>, <input>, <textarea>
 onkeydown (можно отменить)
 onkeypress (можно отменить)
 onkeyup
______________________________

<body>, <a>, <area>, <button>, <input>, <label>,
<select>, <textarea>

 onfocus
 onblur
______________________________

<body>, <frameset>, <iframe>, <img>, <object>
 onload

<body>, <frameset>
 onunload

<img>, <object>
 onabort

<body>, <frameset>, <img>, <object>
 onerror

<body>, <frameset>, <iframe>
 onresize
______________________________

<form>
 onsubmit (можно отменить)
 onreset (можно отменить)

<input>, <textarea>
 onselect

<input>, <textarea>, <select>
 onchange

<body>, элементы с прокруткой
 onscroll
______________________________

Window
 onfocus
 onblur
 onload
 onunload
 onerror
 onresize
 onscroll
______________________________

Document
 onkeydown
 onkeypress
 onkeyup
_____________________________________________

Регистрация событий
___________________

var el = document.getElementById('x');
function foo(){
//Здесь исполняемый код
}
try {
el.addEventListener('click', foo, false);       //DOM 2
} catch(x) {
el.attachEvent('onclick', foo);                 //IE
}
_____________________________________________

Отмена регистрации событий


var el = document.getElementById('x');
function foo(){
//Здесь исполняемый код
}

W3C DOM
 el.removeEventListener('click',foo);
IE
 el.detachEvent('onclick', foo);
_____________________________________________

Получение ссылки на событие


function foo(e){
e = e || event;
console.log(e);
}
event == window.event
_____________________________________________

Отмена действий по-умолчанию

 Получение ссылки на событие
function foo(e){
    e = e || event;
}

W3C DOM
e.preventDefault();
IE
e.returnValue = false;
_____________________________________________

Свойства событий
________________


Любой источник
type          // тип события, клик, скрол
target (W3C DOM) / srcElement (IE)        //ссылка на объект, на котором произошло событий
currentTarget (W3C DOM) / srcElement (IE) //при всплытии событий, указывает на элемент на котором произошло событие

Источник мышь
 button            //Какая клавиша нажата (левая кнопка мыши = 1 во всех браузерах, остальные в разных браузерах по другому)
 altKey, ctrlKey, shiftKey     // При нажатии мыши нажата одна из управляющих клавиш, возвращает true или false
 clientX, clientY          // Координаты мышки относительно окна клиента

Источник клавиатура
keyCode             // Если источником была клавиатура, возвращает код клавишы.
_____________________________________________

Отмена всплытия события
_______________________

Получение ссылки на событие
function foo(e){
e = e || event;
}

W3C DOM
e.stopPropagation();
IE
e.cancelBubble = true;
_____________________________________________

Кроссбраузерная функция:
________________________

function addEvent(el, e, handler){
if (el.addEventListener) {
el.addEventListener(e, handler);
} else if (element.attachEvent) {
el.attachEvent('on' + e, handler);
} else {
el['on' + e] = handler; }
}
addEvent(element, 'click', function(e){...});
_____________________________________________
